apiVersion: v1
kind: Namespace
metadata:
  name: web-app

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-config
  namespace: web-app
data:
  app.conf: |
    server {
      listen 80;
      server_name example.com;
      location / {
        proxy_pass http://web-app:8080;
      }
    }
  app.properties: |
    db.url=postgresql://postgres-svc:5432/myapp
    redis.url=redis-svc:6379
    log.level=INFO

---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: web-app
type: Opaque
data:
  db-password: cG9zdGdyZXNwYXNz # "postgrespass"
  redis-password: cmVkaXNwYXNz # "redispass"
  api-key: c2VjcmV0LWtleQ== # "secret-key"

---
apiVersion: v1
kind: Service
metadata:
  name: web-app-svc
  namespace: web-app
spec:
  selector:
    app: web-app
  ports:
    - port: 8080
      targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-svc
  namespace: web-app
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432

---
apiVersion: v1
kind: Service
metadata:
  name: redis-svc
  namespace: web-app
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
  namespace: web-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
    spec:
      containers:
        - name: web-app
          image: my-web-app:1.0
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
            - name: secrets-volume
              mountPath: /app/secrets
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: db-password
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: redis-password
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: api-key
      volumes:
        - name: config-volume
          configMap:
            name: web-config
        - name: secrets-volume
          secret:
            secretName: app-secrets

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: web-app
spec:
  serviceName: postgres-svc
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: db-password
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: web-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:6
          ports:
            - containerPort: 6379
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: redis-password

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-app-ingress
  namespace: web-app
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: web-app-svc
                port:
                  number: 8080

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: web-app-hpa
  namespace: web-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
